Musl Libc patches used on Alpine Linux v3.8.1.

diff -uNr musl-1.1.19/arch/aarch64/pthread_arch.h musl-1.1.19.mod/arch/aarch64/pthread_arch.h
--- musl-1.1.19/arch/aarch64/pthread_arch.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/aarch64/pthread_arch.h	2018-12-23 14:40:33.625906203 +0200
@@ -2,10 +2,11 @@
 {
 	char *self;
 	__asm__ __volatile__ ("mrs %0,tpidr_el0" : "=r"(self));
-	return (void*)(self + 16 - sizeof(struct pthread));
+	return (void*)(self - sizeof(struct pthread));
 }
 
 #define TLS_ABOVE_TP
-#define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread) - 16)
+#define GAP_ABOVE_TP 16
+#define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread))
 
 #define MC_PC pc
diff -uNr musl-1.1.19/arch/aarch64/reloc.h musl-1.1.19.mod/arch/aarch64/reloc.h
--- musl-1.1.19/arch/aarch64/reloc.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/aarch64/reloc.h	2018-12-23 14:40:33.625906203 +0200
@@ -10,7 +10,7 @@
 
 #define NO_LEGACY_INITFINI
 
-#define TPOFF_K 16
+#define TPOFF_K 0
 
 #define REL_SYMBOLIC    R_AARCH64_ABS64
 #define REL_GOT         R_AARCH64_GLOB_DAT
diff -uNr musl-1.1.19/arch/arm/pthread_arch.h musl-1.1.19.mod/arch/arm/pthread_arch.h
--- musl-1.1.19/arch/arm/pthread_arch.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/arm/pthread_arch.h	2018-12-23 14:40:33.625906203 +0200
@@ -5,7 +5,7 @@
 {
 	char *p;
 	__asm__ __volatile__ ( "mrc p15,0,%0,c13,c0,3" : "=r"(p) );
-	return (void *)(p+8-sizeof(struct pthread));
+	return (void *)(p-sizeof(struct pthread));
 }
 
 #else
@@ -21,12 +21,13 @@
 	extern uintptr_t __attribute__((__visibility__("hidden"))) __a_gettp_ptr;
 	register uintptr_t p __asm__("r0");
 	__asm__ __volatile__ ( BLX " %1" : "=r"(p) : "r"(__a_gettp_ptr) : "cc", "lr" );
-	return (void *)(p+8-sizeof(struct pthread));
+	return (void *)(p-sizeof(struct pthread));
 }
 
 #endif
 
 #define TLS_ABOVE_TP
-#define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread) - 8)
+#define GAP_ABOVE_TP 8
+#define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread))
 
 #define MC_PC arm_pc
diff -uNr musl-1.1.19/arch/arm/reloc.h musl-1.1.19.mod/arch/arm/reloc.h
--- musl-1.1.19/arch/arm/reloc.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/arm/reloc.h	2018-12-23 14:40:33.625906203 +0200
@@ -16,7 +16,7 @@
 
 #define NO_LEGACY_INITFINI
 
-#define TPOFF_K 8
+#define TPOFF_K 0
 
 #define REL_SYMBOLIC    R_ARM_ABS32
 #define REL_GOT         R_ARM_GLOB_DAT
diff -uNr musl-1.1.19/arch/mips/pthread_arch.h musl-1.1.19.mod/arch/mips/pthread_arch.h
--- musl-1.1.19/arch/mips/pthread_arch.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/mips/pthread_arch.h	2018-12-23 14:40:33.625906203 +0200
@@ -11,6 +11,7 @@
 }
 
 #define TLS_ABOVE_TP
+#define GAP_ABOVE_TP 0
 #define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread) + 0x7000)
 
 #define DTP_OFFSET 0x8000
diff -uNr musl-1.1.19/arch/mips64/pthread_arch.h musl-1.1.19.mod/arch/mips64/pthread_arch.h
--- musl-1.1.19/arch/mips64/pthread_arch.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/mips64/pthread_arch.h	2018-12-23 14:40:33.625906203 +0200
@@ -11,6 +11,7 @@
 }
 
 #define TLS_ABOVE_TP
+#define GAP_ABOVE_TP 0
 #define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread) + 0x7000)
 
 #define DTP_OFFSET 0x8000
diff -uNr musl-1.1.19/arch/mipsn32/pthread_arch.h musl-1.1.19.mod/arch/mipsn32/pthread_arch.h
--- musl-1.1.19/arch/mipsn32/pthread_arch.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/mipsn32/pthread_arch.h	2018-12-23 14:40:33.625906203 +0200
@@ -11,6 +11,7 @@
 }
 
 #define TLS_ABOVE_TP
+#define GAP_ABOVE_TP 0
 #define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread) + 0x7000)
 
 #define DTP_OFFSET 0x8000
diff -uNr musl-1.1.19/arch/or1k/pthread_arch.h musl-1.1.19.mod/arch/or1k/pthread_arch.h
--- musl-1.1.19/arch/or1k/pthread_arch.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/or1k/pthread_arch.h	2018-12-23 14:40:33.625906203 +0200
@@ -12,6 +12,7 @@
 }
 
 #define TLS_ABOVE_TP
+#define GAP_ABOVE_TP 0
 #define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread))
 
 #define MC_PC regs.pc
diff -uNr musl-1.1.19/arch/powerpc/bits/hwcap.h musl-1.1.19.mod/arch/powerpc/bits/hwcap.h
--- musl-1.1.19/arch/powerpc/bits/hwcap.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/powerpc/bits/hwcap.h	2018-12-23 14:40:33.622572786 +0200
@@ -38,3 +38,6 @@
 #define PPC_FEATURE2_HTM_NOSC		0x01000000
 #define PPC_FEATURE2_ARCH_3_00		0x00800000
 #define PPC_FEATURE2_HAS_IEEE128	0x00400000
+#define PPC_FEATURE2_DARN		0x00200000
+#define PPC_FEATURE2_SCV		0x00100000
+#define PPC_FEATURE2_HTM_NO_SUSPEND	0x00080000
diff -uNr musl-1.1.19/arch/powerpc/pthread_arch.h musl-1.1.19.mod/arch/powerpc/pthread_arch.h
--- musl-1.1.19/arch/powerpc/pthread_arch.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/powerpc/pthread_arch.h	2018-12-23 14:40:33.625906203 +0200
@@ -11,6 +11,7 @@
 }
                         
 #define TLS_ABOVE_TP
+#define GAP_ABOVE_TP 0
 #define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread) + 0x7000)
 
 #define DTP_OFFSET 0x8000
diff -uNr musl-1.1.19/arch/powerpc64/bits/hwcap.h musl-1.1.19.mod/arch/powerpc64/bits/hwcap.h
--- musl-1.1.19/arch/powerpc64/bits/hwcap.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/powerpc64/bits/hwcap.h	2018-12-23 14:40:33.622572786 +0200
@@ -38,3 +38,6 @@
 #define PPC_FEATURE2_HTM_NOSC		0x01000000
 #define PPC_FEATURE2_ARCH_3_00		0x00800000
 #define PPC_FEATURE2_HAS_IEEE128	0x00400000
+#define PPC_FEATURE2_DARN		0x00200000
+#define PPC_FEATURE2_SCV		0x00100000
+#define PPC_FEATURE2_HTM_NO_SUSPEND	0x00080000
diff -uNr musl-1.1.19/arch/powerpc64/pthread_arch.h musl-1.1.19.mod/arch/powerpc64/pthread_arch.h
--- musl-1.1.19/arch/powerpc64/pthread_arch.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/powerpc64/pthread_arch.h	2018-12-23 14:40:33.629239620 +0200
@@ -6,6 +6,7 @@
 }
 
 #define TLS_ABOVE_TP
+#define GAP_ABOVE_TP 0
 #define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread) + 0x7000)
 
 #define DTP_OFFSET 0x8000
diff -uNr musl-1.1.19/arch/sh/pthread_arch.h musl-1.1.19.mod/arch/sh/pthread_arch.h
--- musl-1.1.19/arch/sh/pthread_arch.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/sh/pthread_arch.h	2018-12-23 14:40:33.629239620 +0200
@@ -2,10 +2,11 @@
 {
 	char *self;
 	__asm__ __volatile__ ("stc gbr,%0" : "=r" (self) );
-	return (struct pthread *) (self + 8 - sizeof(struct pthread));
+	return (struct pthread *) (self - sizeof(struct pthread));
 }
 
 #define TLS_ABOVE_TP
-#define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread) - 8)
+#define GAP_ABOVE_TP 8
+#define TP_ADJ(p) ((char *)(p) + sizeof(struct pthread))
 
 #define MC_PC sc_pc
diff -uNr musl-1.1.19/arch/sh/reloc.h musl-1.1.19.mod/arch/sh/reloc.h
--- musl-1.1.19/arch/sh/reloc.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/arch/sh/reloc.h	2018-12-23 14:40:33.629239620 +0200
@@ -20,7 +20,7 @@
 
 #define LDSO_ARCH "sh" ENDIAN_SUFFIX FP_SUFFIX ABI_SUFFIX
 
-#define TPOFF_K 8
+#define TPOFF_K 0
 
 #define REL_SYMBOLIC    R_SH_DIR32
 #define REL_OFFSET      R_SH_REL32
diff -uNr musl-1.1.19/ldso/dynlink.c musl-1.1.19.mod/ldso/dynlink.c
--- musl-1.1.19/ldso/dynlink.c	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/ldso/dynlink.c	2018-12-23 14:40:33.629239620 +0200
@@ -1583,8 +1583,9 @@
 		libc.tls_head = tls_tail = &app.tls;
 		app.tls_id = tls_cnt = 1;
 #ifdef TLS_ABOVE_TP
-		app.tls.offset = 0;
-		tls_offset = app.tls.size
+		app.tls.offset = GAP_ABOVE_TP;
+		app.tls.offset += -GAP_ABOVE_TP & (app.tls.align-1);
+		tls_offset = app.tls.offset + app.tls.size
 			+ ( -((uintptr_t)app.tls.image + app.tls.size)
 			& (app.tls.align-1) );
 #else
diff -uNr musl-1.1.19/src/complex/casin.c musl-1.1.19.mod/src/complex/casin.c
--- musl-1.1.19/src/complex/casin.c	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/src/complex/casin.c	2018-12-23 14:40:33.619239370 +0200
@@ -12,5 +12,6 @@
 	x = creal(z);
 	y = cimag(z);
 	w = CMPLX(1.0 - (x - y)*(x + y), -2.0*x*y);
-	return clog(CMPLX(-y, x) + csqrt(w));
+	double complex r = clog(CMPLX(-y, x) + csqrt(w));
+	return CMPLX(cimag(r), -creal(r));
 }
diff -uNr musl-1.1.19/src/complex/casinf.c musl-1.1.19.mod/src/complex/casinf.c
--- musl-1.1.19/src/complex/casinf.c	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/src/complex/casinf.c	2018-12-23 14:40:33.619239370 +0200
@@ -10,5 +10,6 @@
 	x = crealf(z);
 	y = cimagf(z);
 	w = CMPLXF(1.0 - (x - y)*(x + y), -2.0*x*y);
-	return clogf(CMPLXF(-y, x) + csqrtf(w));
+	float complex r = clogf(CMPLXF(-y, x) + csqrtf(w));
+	return CMPLXF(cimagf(r), -crealf(r));
 }
diff -uNr musl-1.1.19/src/complex/casinl.c musl-1.1.19.mod/src/complex/casinl.c
--- musl-1.1.19/src/complex/casinl.c	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/src/complex/casinl.c	2018-12-23 14:40:33.619239370 +0200
@@ -15,6 +15,7 @@
 	x = creall(z);
 	y = cimagl(z);
 	w = CMPLXL(1.0 - (x - y)*(x + y), -2.0*x*y);
-	return clogl(CMPLXL(-y, x) + csqrtl(w));
+	long double complex r = clogl(CMPLXL(-y, x) + csqrtl(w));
+	return CMPLXL(cimagl(r), -creall(r));
 }
 #endif
diff -uNr musl-1.1.19/src/env/__init_tls.c musl-1.1.19.mod/src/env/__init_tls.c
--- musl-1.1.19/src/env/__init_tls.c	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/src/env/__init_tls.c	2018-12-23 14:40:33.632573036 +0200
@@ -66,8 +66,10 @@
 }
 
 #if ULONG_MAX == 0xffffffff
+typedef Elf32_Ehdr Ehdr;
 typedef Elf32_Phdr Phdr;
 #else
+typedef Elf64_Ehdr Ehdr;
 typedef Elf64_Phdr Phdr;
 #endif
 
@@ -77,15 +79,23 @@
 static void static_init_tls(size_t *aux)
 {
 	unsigned char *p;
-	size_t n;
+	size_t n, e;
 	Phdr *phdr, *tls_phdr=0;
 	size_t base = 0;
 	void *mem;
 
-	for (p=(void *)aux[AT_PHDR],n=aux[AT_PHNUM]; n; n--,p+=aux[AT_PHENT]) {
+	if (aux[AT_BASE]) {
+		Ehdr *ehdr = (void *)aux[AT_BASE];
+		p = (unsigned char *)aux[AT_BASE] + ehdr->e_phoff;
+		n = ehdr->e_phnum;
+		e = ehdr->e_phentsize;
+	} else {
+		p = (void *)aux[AT_PHDR];
+		n = aux[AT_PHNUM];
+		e = aux[AT_PHENT];
+	}
+	for (; n; n--, p+=e) {
 		phdr = (void *)p;
-		if (phdr->p_type == PT_PHDR)
-			base = aux[AT_PHDR] - phdr->p_vaddr;
 		if (phdr->p_type == PT_DYNAMIC && _DYNAMIC)
 			base = (size_t)_DYNAMIC - phdr->p_vaddr;
 		if (phdr->p_type == PT_TLS)
@@ -103,13 +113,19 @@
 
 	main_tls.size += (-main_tls.size - (uintptr_t)main_tls.image)
 		& (main_tls.align-1);
-	if (main_tls.align < MIN_TLS_ALIGN) main_tls.align = MIN_TLS_ALIGN;
-#ifndef TLS_ABOVE_TP
+#ifdef TLS_ABOVE_TP
+	main_tls.offset = GAP_ABOVE_TP;
+	main_tls.offset += -GAP_ABOVE_TP & (main_tls.align-1);
+#else
 	main_tls.offset = main_tls.size;
 #endif
+	if (main_tls.align < MIN_TLS_ALIGN) main_tls.align = MIN_TLS_ALIGN;
 
 	libc.tls_align = main_tls.align;
 	libc.tls_size = 2*sizeof(void *) + sizeof(struct pthread)
+#ifdef TLS_ABOVE_TP
+		+ main_tls.offset
+#endif
 		+ main_tls.size + main_tls.align
 		+ MIN_TLS_ALIGN-1 & -MIN_TLS_ALIGN;
 
diff -uNr musl-1.1.19/src/internal/pthread_impl.h musl-1.1.19.mod/src/internal/pthread_impl.h
--- musl-1.1.19/src/internal/pthread_impl.h	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/src/internal/pthread_impl.h	2018-12-23 14:40:33.622572786 +0200
@@ -160,7 +160,7 @@
 void __restore_sigs(void *);
 
 #define DEFAULT_STACK_SIZE 81920
-#define DEFAULT_GUARD_SIZE 4096
+#define DEFAULT_GUARD_SIZE 8192
 
 #define __ATTRP_C11_THREAD ((void*)(uintptr_t)-1)
 
diff -uNr musl-1.1.19/src/ldso/aarch64/tlsdesc.s musl-1.1.19.mod/src/ldso/aarch64/tlsdesc.s
--- musl-1.1.19/src/ldso/aarch64/tlsdesc.s	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/src/ldso/aarch64/tlsdesc.s	2018-12-23 14:40:33.629239620 +0200
@@ -14,7 +14,7 @@
 // size_t __tlsdesc_dynamic(size_t *a)
 // {
 // 	struct {size_t modidx,off;} *p = (void*)a[1];
-// 	size_t *dtv = *(size_t**)(tp + 16 - 8);
+// 	size_t *dtv = *(size_t**)(tp - 8);
 // 	if (p->modidx <= dtv[0])
 // 		return dtv[p->modidx] + p->off - tp;
 // 	return __tls_get_new(p) - tp;
@@ -28,8 +28,7 @@
 	mrs x1,tpidr_el0      // tp
 	ldr x0,[x0,#8]        // p
 	ldr x2,[x0]           // p->modidx
-	add x3,x1,#8
-	ldr x3,[x3]           // dtv
+	ldr x3,[x1,#-8]       // dtv
 	ldr x4,[x3]           // dtv[0]
 	cmp x2,x4
 	b.hi 1f
diff -uNr musl-1.1.19/src/locale/langinfo.c musl-1.1.19.mod/src/locale/langinfo.c
--- musl-1.1.19/src/locale/langinfo.c	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/src/locale/langinfo.c	2018-12-23 14:40:33.609239119 +0200
@@ -33,7 +33,7 @@
 	int idx = item & 65535;
 	const char *str;
 
-	if (item == CODESET) return MB_CUR_MAX==1 ? "ASCII" : "UTF-8";
+	if (item == CODESET) return loc->cat[LC_CTYPE] ? "UTF-8" : "ASCII";
 
 	/* _NL_LOCALE_NAME extension */
 	if (idx == 65535 && cat < LC_ALL)
diff -uNr musl-1.1.19/src/math/fmaf.c musl-1.1.19.mod/src/math/fmaf.c
--- musl-1.1.19/src/math/fmaf.c	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/src/math/fmaf.c	2018-12-23 14:40:33.615905953 +0200
@@ -50,7 +50,7 @@
 	/* Common case: The double precision result is fine. */
 	if ((u.i & 0x1fffffff) != 0x10000000 || /* not a halfway case */
 		e == 0x7ff ||                   /* NaN */
-		result - xy == z ||                 /* exact */
+		(result - xy == z && result - z == xy) || /* exact */
 		fegetround() != FE_TONEAREST)       /* not round-to-nearest */
 	{
 		/*
diff -uNr musl-1.1.19/src/misc/getopt.c musl-1.1.19.mod/src/misc/getopt.c
--- musl-1.1.19/src/misc/getopt.c	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/src/misc/getopt.c	2018-12-23 14:40:33.605905702 +0200
@@ -77,7 +77,7 @@
 		if (l>0) i+=l; else i++;
 	} while (l && d != c);
 
-	if (d != c) {
+	if (d != c || c == ':') {
 		optopt = c;
 		if (optstring[0] != ':' && opterr)
 			__getopt_msg(argv[0], ": unrecognized option: ", optchar, k);
diff -uNr musl-1.1.19/src/time/wcsftime.c musl-1.1.19.mod/src/time/wcsftime.c
--- musl-1.1.19/src/time/wcsftime.c	2018-02-22 20:39:19.000000000 +0200
+++ musl-1.1.19.mod/src/time/wcsftime.c	2018-12-23 14:40:33.615905953 +0200
@@ -4,7 +4,7 @@
 #include "locale_impl.h"
 #include "libc.h"
 
-const char *__strftime_fmt_1(char (*s)[100], size_t *l, int f, const struct tm *tm, locale_t loc);
+const char *__strftime_fmt_1(char (*s)[100], size_t *l, int f, const struct tm *tm, locale_t loc, int pad);
 
 size_t __wcsftime_l(wchar_t *restrict s, size_t n, const wchar_t *restrict f, const struct tm *restrict tm, locale_t loc)
 {
@@ -14,7 +14,7 @@
 	wchar_t *p;
 	const char *t_mb;
 	const wchar_t *t;
-	int plus;
+	int pad, plus;
 	unsigned long width;
 	for (l=0; l<n; f++) {
 		if (!*f) {
@@ -26,6 +26,8 @@
 			continue;
 		}
 		f++;
+		pad = 0;
+		if (*f == '-' || *f == '_' || *f == '0') pad = *f++;
 		if ((plus = (*f == '+'))) f++;
 		width = wcstoul(f, &p, 10);
 		if (*p == 'C' || *p == 'F' || *p == 'G' || *p == 'Y') {
@@ -35,7 +37,7 @@
 		}
 		f = p;
 		if (*f == 'E' || *f == 'O') f++;
-		t_mb = __strftime_fmt_1(&buf, &k, *f, tm, loc);
+		t_mb = __strftime_fmt_1(&buf, &k, *f, tm, loc, pad);
 		if (!t_mb) break;
 		k = mbstowcs(wbuf, t_mb, sizeof wbuf / sizeof *wbuf);
 		if (k == (size_t)-1) return 0;
